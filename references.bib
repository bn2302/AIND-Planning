
@article{blum_fast_1997,
	title = {Fast planning through planning graph analysis},
	volume = {90},
	issn = {0004-3702},
	url = {http://www.sciencedirect.com/science/article/pii/S0004370296000471},
	doi = {10.1016/S0004-3702(96)00047-1},
	abstract = {We introduce a new approach to planning in {STRIPS}-like domains based on constructing and analyzing a compact structure we call a planning graph. We describe a new planner, Graphplan, that uses this paradigm. Graphplan always returns a shortest possible partial-order plan, or states that no valid plan exists. We provide empirical evidence in favor of this approach, showing that Graphplan outperforms the total-order planner, Prodigy and the partial-order planner, {UCPOP}, on a variety of interesting natural and artificial planning problems. We also give empirical evidence that the plans produced by Graphplan are quite sensible. Since searches made by this approach are fundamentally different from the searches of other common planning methods, they provide a new perspective on the planning problem.},
	pages = {281--300},
	number = {1},
	journaltitle = {Artificial Intelligence},
	shortjournal = {Artificial Intelligence},
	author = {Blum, Avrim L. and Furst, Merrick L.},
	urldate = {2017-05-01},
	date = {1997-02-01},
	keywords = {general purpose planning, graph algorithms, planning graph analysis, {STRIPS} planning},
	file = {ScienceDirect Full Text PDF:/home/bastian/.mozilla/firefox/23rw1drt.default/zotero/storage/A9EGQ6CF/Blum and Furst - 1997 - Fast planning through planning graph analysis.pdf:application/pdf;ScienceDirect Snapshot:/home/bastian/.mozilla/firefox/23rw1drt.default/zotero/storage/6EUPRDWC/S0004370296000471.html:text/html}
}

@article{beame_towards_2004,
	title = {Towards Understanding and Harnessing the Potential of Clause Learning},
	volume = {22},
	issn = {1076-9757},
	url = {http://dl.acm.org/citation.cfm?id=1622487.1622497},
	abstract = {Effcient implementations of {DPLL} with the addition of clause learning are the fastest complete Boolean satisfiability solvers and can handle many significant real-world problems, such as verification, planning and design. Despite its importance, little is known of the ultimate strengths and limitations of the technique. This paper presents the first precise characterization of clause learning as a proof system ({CL}), and begins the task of understanding its power by relating it to the well-studied resolution proof system. In particular, we show that with a new learning scheme, {CL} can provide exponentially shorter proofs than many proper refinements of general resolution ({RES}) satisfying a natural property. These include regular and Davis-Putnam resolution, which are already known to be much stronger than ordinary {DPLL}. We also show that a slight variant of {CL} with unlimited restarts is as powerful as {RES} itself. Translating these analytical results to practice, however, presents a challenge because of the nondeterministic nature of clause learning algorithms. We propose a novel way of exploiting the underlying problem structure, in the form of a high level problem description such as a graph or {PDDL} specification, to guide clause learning algorithms toward faster solutions. We show that this leads to exponential speed-ups on grid and randomized pebbling problems, as well as substantial improvements on certain ordering formulas.},
	pages = {319--351},
	number = {1},
	journaltitle = {J. Artif. Int. Res.},
	author = {Beame, Paul and Kautz, Henry and Sabharwal, Ashish},
	urldate = {2017-05-01},
	date = {2004-12}
}

@online{linear_prog,
	title = {linear programming {\textbar} mathematics},
	url = {https://www.britannica.com/topic/linear-programming-mathematics},
	abstract = {Mathematical modeling technique useful for guiding quantitative decisions in business planning, industrial engineering, and—to a lesser extent—in the social and physical sciences....},
	titleaddon = {Encyclopedia Britannica},
	urldate = {2017-05-01},
	file = {Snapshot:/home/bastian/.mozilla/firefox/23rw1drt.default/zotero/storage/5AJ8GBM5/linear-programming-mathematics.html:text/html}
}
